<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Analog Gauge Object</title>
  <script type="text/javascript" src="../../highlight.pack.js"></script>
  <script type="text/javascript" src="../../highlightCode.js"></script>
  <link href='../../highlight.css' rel='stylesheet' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<script src="../../d3.v4.min.js"></script>


</head>
<body style='padding:10px;font-family:arial'>
<center>
<h4>Analog Gauge Object</h4>
<div style='width:90%;background-color:gainsboro;text-align:justify;padding:10px;border-radius:6px;'>
This is a round configurable gauge object with a dial face. The dial transitions smoothly during value changes, using D3 version 4. Also includes digital value, green zone, red zone, and orange zone on the dial face.
</div>
<table><tr>
<td>
<div style="padding:10px;width:500px;text-align:left">
<center>
<button onClick=changeOAT() >Change OAT Value</button>
<button onClick=changeHWS() >Change HWS Value</button>
<button onClick=changePERCENT() >Change PERCENT Value</button>
</center><p></p>

Place a &lt;g> element in your svg drawing with its id=name+"GaugeContainer" and translation request. Note: the translation values
reference the center of the gauge.<br>
e.g. &lt;g id="myNameGaugeContainer" transform="translate(200,200)" />


<p></p>
<b>Configuring The Gauge:</b><br />
createGauge(name, label, min, max, majorTicks, minorTicks, ringColor, faceColor, diameter, orangeZoneRange, redZoneRange, greenZoneRange,units)<br>
1.) name - id name for the gauge. Included in id<br>
2.) label - shown in gauge.<br>
3.) min - minimum value on gauge<br>
4.) max - maximum value on gauge<br>
5.) majorTicks - number of tick marks for full range<br>
6.) minorTicks - number of tick marks between each major tick mark<br>
7.) ringColor - outermost circle color<br>
8.) faceColor - gauge circle color.<br>
9.) diameter - The size of the gauge<br>
10.) orangeZoneRange(optional) - orange band [start,end]<br>
11.) redZoneRange(optional) -  red band [start,end]<br>
12.) greenZoneRange(optional) -  green band [start,end]<br>
13.) units - units of measurement (If unicode character, use hexidecimal number \u[hex]. e.g. for degree symbol: \u00B0)
</div>
</td>
<td>
<div id="svgDiv" style='width:400px;height:400px;'>
<svg id=mySVG width=400 height=400>
<g id=gaugeOATGaugeContainer transform='translate(100,100)'/>
<g id=gaugeHWSGaugeContainer transform='translate(300,100)' />
<g id=gaugePERCENTGaugeContainer transform='translate(200,250)'  />
</svg>
</div>

</td>
</tr></table>
  <br />SVG Source:
  <div id=svgSourceDiv style=overflow:auto;width:100%;height:1px;text-align:left; /></div>
  Javascript:
  <div id=jsCodeDiv style=overflow:auto;width:100%;text-align:left; /></div><p></p>
</center>
<script id=myScript>
//======================GAUGE OBJECT========================================
//---NOTE: based on https://github.com/thlorenz/d3-gauge plus requires D3 version 4 via:  https://d3js.org/d3.v4.min.js ---

function Gauge(placeholderName, configuration)
{
	this.placeholderName = placeholderName;

	var self = this; // for internal d3 functions

	this.configure = function(configuration)
	{
		this.config = configuration;

		this.config.diameter = this.config.diameter * 0.9;

		this.config.raduis = this.config.diameter * 0.97 / 2;
		this.config.cx = this.config.diameter / 2;
		this.config.cy = this.config.diameter / 2;

		this.config.min = undefined != configuration.min ? configuration.min : 0;
		this.config.max = undefined != configuration.max ? configuration.max : 100;
		this.config.range = this.config.max - this.config.min;

		this.config.majorTicks = configuration.majorTicks || 5;
		this.config.minorTicks = configuration.minorTicks || 2;

		this.config.greenColor 	= configuration.greenColor || "#109618";
		this.config.orangeColor = configuration.orangeColor || "#FF9900";
		this.config.redColor 	= configuration.redColor || "#DC3912";

		this.config.transitionDuration = configuration.transitionDuration || 500;
	}

    this.render = function()
    {
        this.gauge = d3.select("#" + this.placeholderName)
        .attr("class", "gauge")
        .attr("width", this.config.diameter)
        .attr("height", this.config.diameter)

        this.gauge.append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", this.config.raduis)
        .style("fill", this.config.ringColor)
        .style("stroke", "#000")
        .style("stroke-width", "0.5px");

        this.gauge.append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", 0.9 * this.config.raduis)
        .style("fill", this.config.faceColor)
        .style("stroke", "#e0e0e0")
        .style("stroke-width", "2px");

        if(this.config.greenZoneRange)
            for (var index in this.config.greenZones)
                this.drawBand(this.config.greenZones[index].from, this.config.greenZones[index].to, self.config.greenColor);

        if(this.config.orangeZoneRange)
    		for (var index in this.config.orangeZones)
    			this.drawBand(this.config.orangeZones[index].from, this.config.orangeZones[index].to, self.config.orangeColor);

        if(this.config.redZoneRange)
    		for (var index in this.config.redZones)
    			this.drawBand(this.config.redZones[index].from, this.config.redZones[index].to, self.config.redColor);

        if (undefined != this.config.label)
        {
            var fontSize = Math.round(this.config.diameter / 9);
            this.gauge.append("svg:text")
            .attr("x", this.config.cx)
            .attr("y", this.config.cy / 2 + fontSize / 2)
            .attr("dy", fontSize / 2)
            .attr("text-anchor", "middle")
            .text(this.config.label)
            .style("font-size", fontSize + "px")
            .style("fill", "#333")
            .style("stroke-width", "0px");
        }
        if (this.config.units)
        {
            var fontSize = Math.round(this.config.diameter / 11);
            this.gauge.append("svg:text")
            .attr("x", this.config.cx)
            .attr("y", this.config.cy + fontSize)
            .attr("dy", fontSize)
            .attr("text-anchor", "middle")
            .text(this.config.units)
            .style("font-size", fontSize + "px")
            .style("fill", "#333")
            .style("stroke-width", "0px");
        }


        var fontSize = Math.round(this.config.diameter / 16);
        var majorDelta = this.config.range / (this.config.majorTicks - 1);
        for (var major = this.config.min; major <= this.config.max; major += majorDelta)
        {
            var minorDelta = majorDelta / this.config.minorTicks;
            for (var minor = major + minorDelta; minor < Math.min(major + majorDelta, this.config.max); minor += minorDelta)
            {
                var point1 = this.valueToPoint(minor, 0.75);
                var point2 = this.valueToPoint(minor, 0.85);

                this.gauge.append("svg:line")
                .attr("x1", point1.x)
                .attr("y1", point1.y)
                .attr("x2", point2.x)
                .attr("y2", point2.y)
                .style("stroke", "#666")
                .style("stroke-width", "1px");
            }

            var point1 = this.valueToPoint(major, 0.7);
            var point2 = this.valueToPoint(major, 0.85);

            this.gauge.append("svg:line")
            .attr("x1", point1.x)
            .attr("y1", point1.y)
            .attr("x2", point2.x)
            .attr("y2", point2.y)
            .style("stroke", "#333")
            .style("stroke-width", "2px");

            if (major == this.config.min || major == this.config.max)
            {
                var point = this.valueToPoint(major, 0.63);

                this.gauge.append("svg:text")
                .attr("x", point.x)
                .attr("y", point.y)
                .attr("dy", fontSize / 2)
                .attr("text-anchor", major == this.config.min ? "start" : "end")
                .text(major)
                .style("font-size", (fontSize+4) + "px")
                .style("fill", "#333")
                .style("stroke-width", "0px");
            }
        }

        var pointerContainer = this.gauge.append("svg:g").attr("class", "pointerContainer");

        var midValue = (this.config.min + this.config.max) / 2;

        var pointerPath = this.buildPointerPath(midValue);

        var pointerLine = d3.line()
        .x(function(d) { return d.x })
        .y(function(d) { return d.y })
        .curve(d3.curveBasis);

        pointerContainer.selectAll("path")
        .data([pointerPath])
        .enter()
        .append("svg:path")
        .attr("d", pointerLine)
        .style("fill", "#dc3912")
        .style("stroke", "#c63310")
        .style("fill-opacity", 0.7)

        pointerContainer.append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", 0.12 * this.config.raduis)
        .style("fill", "#4684EE")
        .style("stroke", "#666")
        .style("opacity", 1);

        var fontSize = Math.round(this.config.diameter / 10);
        pointerContainer.selectAll("text")
        .data([midValue])
        .enter()
        .append("svg:text")
        .attr("x", this.config.cx)
        .attr("y", this.config.diameter - this.config.cy / 4 - fontSize)
        .attr("dy", fontSize)
        .attr("text-anchor", "middle")
        .style("font-size", (fontSize+4) + "px")
        .style("fill", "#000")
        .style("stroke-width", "1px");

        this.redraw(this.config.min, 0);
    }

	this.buildPointerPath = function(value)
	{
		var delta = this.config.range / 13;

		var head = valueToPoint(value, 0.85);
		var head1 = valueToPoint(value - delta, 0.12);
		var head2 = valueToPoint(value + delta, 0.12);

		var tailValue = value - (this.config.range * (1/(270/360)) / 2);
		var tail = valueToPoint(tailValue, 0.28);
		var tail1 = valueToPoint(tailValue - delta, 0.12);
		var tail2 = valueToPoint(tailValue + delta, 0.12);

		return [head, head1, tail2, tail, tail1, head2, head];

		function valueToPoint(value, factor)
		{
			var point = self.valueToPoint(value, factor);
			point.x -= self.config.cx;
			point.y -= self.config.cy;
			return point;
		}
	}

    this.drawBand = function(start, end, color)
    {
        if (0 >= end - start) return;

        this.gauge.append("svg:path")
        .style("fill", color)
        .attr("d", d3.arc()
        .startAngle(this.valueToRadians(start))
        .endAngle(this.valueToRadians(end))
        .innerRadius(0.65 * this.config.raduis)
        .outerRadius(0.85 * this.config.raduis))
        .attr("transform", function() { return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(270)" });
    }

    this.redraw = function(value, transitionDuration)
    {
        var pointerContainer = this.gauge.select(".pointerContainer");

        pointerContainer.selectAll("text").text(Math.round(value));

        var pointer = pointerContainer.selectAll("path");
        pointer.transition()
        .duration(undefined != transitionDuration ? transitionDuration : this.config.transitionDuration)

        .attrTween("transform", function()
        {
            var pointerValue = value;
            if (value > self.config.max) pointerValue = self.config.max + 0.02*self.config.range;
            else if (value < self.config.min) pointerValue = self.config.min - 0.02*self.config.range;
            var targetRotation = (self.valueToDegrees(pointerValue) - 90);
            var currentRotation = self._currentRotation || targetRotation;
            self._currentRotation = targetRotation;

            return function(step)
            {
                var rotation = currentRotation + (targetRotation-currentRotation)*step;
                return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(" + rotation + ")";
            }
        });
    }

	this.valueToDegrees = function(value)
	{
		return value / this.config.range * 270 - (this.config.min / this.config.range * 270 + 45);
	}

	this.valueToRadians = function(value)
	{
		return this.valueToDegrees(value) * Math.PI / 180;
	}

	this.valueToPoint = function(value, factor)
	{
		return {x: this.config.cx - this.config.raduis * factor * Math.cos(this.valueToRadians(value)),
				y: this.config.cy - this.config.raduis * factor * Math.sin(this.valueToRadians(value)) 		};
	}

	// initialization
	this.configure(configuration);
}

var gauges = [];

function createGauge(name, label, min, max,majorTicks,minorTicks,ringColor,faceColor,diameter,orangeZoneRange,redZoneRange,greenZoneRange,units)
{
    var config =
    {
        diameter: diameter,
        label: label,
        min: min,
        max: max ,
        majorTicks:majorTicks,
        minorTicks:minorTicks,

        ringColor:ringColor,
        faceColor:faceColor,
        orangeZoneRange: undefined != orangeZoneRange ? orangeZoneRange : false,
        redZoneRange: undefined != redZoneRange ? redZoneRange : false,
        greenZoneRange: undefined != greenZoneRange ? greenZoneRange : false,
        units: undefined != units ? units : false
    }

    var range = config.max - config.min;
    if(config.orangeZoneRange)
    {
        var startOrange=config.orangeZoneRange[0]
        var endOrange=config.orangeZoneRange[1]
        config.orangeZones = [{ from: startOrange, to: endOrange }];
    }
    if(config.redZoneRange)
    {
        var startRed=config.redZoneRange[0]
        var endRed=config.redZoneRange[1]
        config.redZones = [{ from: startRed, to: endRed }];
    }
    if(config.greenZoneRange)
    {
        var startGreen=config.greenZoneRange[0]
        var endGreen=config.greenZoneRange[1]
        config.greenZones = [{ from: startGreen, to: endGreen }];
    }

    gauges[name] = new Gauge(name + "GaugeContainer", config);
    gauges[name].render();

    //----translate from gauge center at (0,0)---
    var gaugeNode=document.getElementById(name + "GaugeContainer")
    var bb=gaugeNode.getBBox()
    var gaugeTransX=bb.x+.5*bb.width
    var gaugeTransY=bb.y+.5*bb.height
    //--requested translation---
    var matrix = gaugeNode.transform.baseVal.consolidate().matrix;
    //---translate from center---
    var transX=matrix.e-gaugeTransX
    var transY=matrix.f-gaugeTransY
    gaugeNode.setAttribute("transform","translate("+(transX)+" "+(transY)+")")
}
//==================END GAUGE OBJECT======================================



//---onload this page---
function createGauges() //----this application configuration----
{
    createGauge("gaugeOAT", "OAT",-20,120,5,10,"aqua","lightblue",200,[-20,0],null,null,"\u00B0F");
    createGauge("gaugeHWS", "HWS",80,220,5,10,"red","yellow",200,[180,200],[200,220],null,"\u00B0F");
    createGauge("gaugePERCENT", "PERCENT",0,100,5,10,"blue","gainsboro",200,null,null,[0,100],"\u0025");
}

//---click buttons---
function changeOAT()
{
    var key="gaugeOAT"
    var value =(Math.random() * 120) + -20
    gauges[key].redraw(value);
}

function changeHWS()
{
    var key="gaugeHWS"
    var value =(Math.random() * 140) + 80
    gauges[key].redraw(value);
}

function changePERCENT()
{
    var key="gaugePERCENT"
    var value =(Math.random() * 100)
    gauges[key].redraw(value);
}



</script>
<script>
document.addEventListener("onload",init(),false)
function init()
{    createGauges()
   	showSourceSVG()
	showSourceJS()

}


</script>
<script>

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-88028738-1', 'auto');
  ga('send', 'pageview');


</script>

</body>

</html>