<svg xmlns="http://www.w3.org/2000/svg" xmlns:v="http://vecta.io" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 64 64" stroke="#000" stroke-linecap="round" stroke-linejoin="round" fill="#fff" fill-rule="evenodd" font-family="Roboto" font-size="14px" text-anchor="middle"><g id="jozc1779jy" transform="translate(1.5 21.5)"><title>Action</title><rect fill="#ccffff" height="21" width="60" x="0" y="0" stroke="#838383"/><g transform="translate(0 0)" class="Text.cls"><rect x="0" y="0" width="60" height="21" fill="none" stroke="none"/><text fill="#000000" fill-opacity="1" stroke="none"/></g></g><symbol id="yacC7wQh0CIznslUyJ9x8W.sym" overflow="visible" v:tags="flow chart, action"><title>Action</title><desc>Representation of all action or process</desc><g id="jspf12w71ry" transform="translate(0 0)" class="" v:size="151,51,0.5,0.5" v:formula="{&quot;size.height&quot;:&quot;var size;\n\nswitch (Vecta.activePage.unit()) {\n case 'in': //\n size = this.text() === '' ? 0.5 : Math.ceil((new Vecta.Length(this.textHeight()).in() + 0.25) / 0.25) * 0.25;\n (size &lt; 0.5 ? 0.5 : size) + 'in';\n break;\n case 'cm': //2.4cm\n size = this.text() === '' ? 1.5 : Math.ceil((new Vecta.Length(this.textHeight()).cm() + 0.5) / 0.5) * 0.5;\n (size &lt; 1.5 ? 1.5 : size) + 'cm';\n break;\n case 'mm': //24mm\n size = this.text() === '' ? 15 : Math.ceil((new Vecta.Length(this.textHeight()).mm() + 5) / 5) * 5;\n (size &lt; 15 ? 15 : size) + 'mm';\n break;\n default:\n size = this.text() === '' ? 50 : Math.ceil((this.textHeight() + 10) / 10) * 10;\n size &lt; 50 ? 50 : size;\n}&quot;}" v:dep="{&quot;text&quot;:[&quot;.size.height&quot;],&quot;textHeight&quot;:[&quot;.size.height&quot;]}"><rect fill="#ccffff" height="50" width="150" x="0" y="0"/><g transform="translate(0 0)" class="Text.cls"><rect x="0" y="0" width="150" height="50" fill="none" stroke="none"/><text font-size="12px" fill="#000000" fill-opacity="1" stroke="none"/></g></g></symbol></svg>